function logScore = cellShow3(input,Phase,idNb)
%--------------------------------------------------------------------------
%function logScore = cellShow3(input,Phase,idNb)
%@author:  Manuel Campos
%@date:    May, 2014
%@copyright 2013-2014 Yale University
%==========================================================================
%**********output********:
%logScore:  A logical value corresponding to the user's choice to keep
%          (true -1) or Delete (false - 0) the cell with ID 'idNb'
%
%**********intput********:
%input:     Structure array generated by autoSelectv4.m 
%Phase:     3D array of class unit16 containing the phase constrast data as 
%           nb line x nb column x nb frames
%idNb:      Identity number of the cell to represent in the cellList and 
%           stored in the 'input' input argument
%
%==========================================================================
% This function allows the user to visually check a cell based on 6
% panels representing the cell at birth and at division (with cell
% contours), the mother and daughter cells with contours as well and the
% growth curve log(length) = f(time) fitted with a linear model and the
% residuals of the fit.
% The user can decide whether to keep or delete the cell. This function can
% be looped over the cells detected in the microfluidic chamber to get a
% logical array of good cells to keep, and bad cells to delete.
%--------------------------------------------------------------------------

frameArray = input.frameArray;
ancArray = input.ancArray;
% birthArray = input.birthArray;
progArray = input.progArray;
% divArray = input.divArray;
meshArray = input.meshArray;
cellIdArray = input.cellIdArray;

uniqId=unique(cellIdArray);


initCell=find(uniqId==idNb);
logScore=false;
for cc=initCell:initCell%length(uniqId)
    ix=find(cellIdArray==uniqId(cc));
    if (length(ix)>2)
        % Check whether the cell is less than 10px from the boundary 3min
        % before it divides
        M=str2num(meshArray{ix(end),1})';
        if length(M)>4
            extreM=[min([M(:,2);(M(:,4))]),max([M(:,2);(M(:,4))])];
            if (extreM(1)>5) && (extreM(2)<size(Phase,1)-5)
                    idAnc=[];idProgeny=[];
                    h=figure('Position',[200 50 1400 600]);
                    % Show Ancestor if any
            %         Test for and show ancestor
                    if ~isempty(ancArray{ix(1)})
                        idAnc=str2num(ancArray{ix(1)});
                        indexAnc=find(cellIdArray==idAnc(end));
                        mesh=str2num(meshArray{indexAnc(end),1})';
                        mBox=round([min([mesh(:,1);(mesh(:,3))])-25,max([mesh(:,1);(mesh(:,3))])+25;...
                            min([mesh(:,2);(mesh(:,4))])-25,max([mesh(:,2);(mesh(:,4))])+25]);
                        checkZ=mBox<1;mBox(checkZ)=1;
                        checkZ=mBox(1,:)>size(Phase,2);mBox(1,checkZ)=size(Phase,2);
                        checkZ=mBox(2,:)>size(Phase,1);mBox(2,checkZ)=size(Phase,1);
                        X=[mesh(:,1),flipud(mesh(:,3))]-mBox(1,1);Y=[mesh(:,2),flipud(mesh(:,4))]-mBox(2,1);
                        subplot(2,3,1);
                        imshow(Phase(mBox(2,1):mBox(2,2),mBox(1,1):mBox(1,2),str2double(frameArray{ix(1)})-1),[],'initialmagnification','fit');
                        hold on;plot(X,Y,'-g','linewidth',2);
                        title('Ancestor','fontsize',16);%Need to get the frame number by one
                        hold off;
                    end
                    % Movie of cell cycle with mesh
                    tmpL=0;
                    % @ birth
                    i=1;
                    mesh=str2num(meshArray{ix(i),1})';
                    steplength = edist(mesh(2:end,1)+mesh(2:end,3),mesh(2:end,2)+mesh(2:end,4),...
                                       mesh(1:end-1,1)+mesh(1:end-1,3),mesh(1:end-1,2)+mesh(1:end-1,4))/2;
                    tmpL=sum(steplength)*0.064;
                    if length(mesh)>4
%                         mBox=round([min([mesh(:,1);(mesh(:,3))])-25,max([mesh(:,1);(mesh(:,3))])+25;...
%                             min([mesh(:,2);(mesh(:,4))])-25,max([mesh(:,2);(mesh(:,4))])+25]);
%                         checkZ=mBox<1;mBox(checkZ)=1;
%                         checkZ=mBox(1,:)>size(Phase,2);mBox(1,checkZ)=size(Phase,2);
%                         checkZ=mBox(2,:)>size(Phase,1);mBox(2,checkZ)=size(Phase,1);
                        X=[mesh(:,1),flipud(mesh(:,3))]-mBox(1,1);Y=[mesh(:,2),flipud(mesh(:,4))]-mBox(2,1);
                        subplot(2,3,4);
                        imshow(Phase(mBox(2,1):mBox(2,2),mBox(1,1):mBox(1,2),str2double(frameArray{ix(i)})),[],'initialmagnification','fit');
                        hold on;plot(X,Y,'-y','linewidth',2);
                        title('@ birth','fontsize',16);
                        pause(.025);
                        hold off;
                    end
                    % @ division
                    i=length(ix);
                    mesh=str2num(meshArray{ix(i),1})';
                    steplength = edist(mesh(2:end,1)+mesh(2:end,3),mesh(2:end,2)+mesh(2:end,4),...
                                       mesh(1:end-1,1)+mesh(1:end-1,3),mesh(1:end-1,2)+mesh(1:end-1,4))/2;
                    tmpL=sum(steplength)*0.064;
                    if length(mesh)>4
                        mBox=round([min([mesh(:,1);(mesh(:,3))])-25,max([mesh(:,1);(mesh(:,3))])+25;...
                            min([mesh(:,2);(mesh(:,4))])-25,max([mesh(:,2);(mesh(:,4))])+25]);
                        checkZ=mBox<1;mBox(checkZ)=1;
                        checkZ=mBox(1,:)>size(Phase,2);mBox(1,checkZ)=size(Phase,2);
                        checkZ=mBox(2,:)>size(Phase,1);mBox(2,checkZ)=size(Phase,1);
                        X=[mesh(:,1),flipud(mesh(:,3))]-mBox(1,1);Y=[mesh(:,2),flipud(mesh(:,4))]-mBox(2,1);
                        subplot(2,3,2);
                        imshow(Phase(mBox(2,1):mBox(2,2),mBox(1,1):mBox(1,2),str2double(frameArray{ix(i)})),[],'initialmagnification','fit');
                        hold on;plot(X,Y,'-y','linewidth',2);
                        title('@ division','fontsize',16);
                        hold off;
                    end

                    % Show progenies if any
            %         Test for progeny
                    if ~isempty(progArray{ix(end)})
                        idProgeny=str2num(progArray{ix(end)});
                        subplot(2,3,5);
                        imshow(Phase(mBox(2,1):mBox(2,2),mBox(1,1):mBox(1,2),str2double(frameArray{ix(end)})+1),[],'initialmagnification','fit');hold on;
                        for pro=1:2
                            indexProgeny=find(cellIdArray==idProgeny(pro));
                            mesh=str2num(meshArray{indexProgeny(1),1})';
                            if length(mesh)>4
                                X=[mesh(:,1),flipud(mesh(:,3))]-mBox(1,1);Y=[mesh(:,2),flipud(mesh(:,4))]-mBox(2,1);
                                plot(X,Y,'-g','linewidth',2);
                            end
                        end
                        title( 'Descendants','fontsize',16);%Need to get the frame number by one
                        hold off;
                    end
                    
                    % Check growth by plotting log(length) vs time + fit
                    % get time and lengthes for this cell
                    frames=0:1:length(ix)-1;
                    for span=1:length(ix)
                        M=str2num(meshArray{ix(span),1})';
                        if length(M)>4
                            steplength = edist(M(2:end,1)+M(2:end,3),M(2:end,2)+M(2:end,4),...
                                       M(1:end-1,1)+M(1:end-1,3),M(1:end-1,2)+M(1:end-1,4))/2;
                            lengthes(span)=sum(steplength);
                        end
                    end
                    Lf=fit(frames',log(lengthes./lengthes(1))','poly1');
                    subplot(2,3,3);
                    plot(frames,log(lengthes./lengthes(1)),'.k');hold on;
                    plot(Lf,'-r');hold off;legend('off');
                    xlabel('frame');ylabel('log (length)');
                    subplot(2,3,6);
                    plot(Lf,frames',log(lengthes./lengthes(1))','residuals');legend('off');
                    xlabel('frame');ylabel('residuals');
            
            answer = questdlg('Keep Cell ?','Keep Cell ?');
                close(h);
                if strcmp('Yes',answer)
                    logScore=true;
                elseif strcmp('No',answer)
                    logScore=false;
                elseif strcmp('Cancel',answer)
                    break
                end
            end
        end
    end
end
end

function d=edist(x1,y1,x2,y2)
    % complementary for "getextradata", computes the length between 2 points
    d=sqrt((x2-x1).^2+(y2-y1).^2);
end