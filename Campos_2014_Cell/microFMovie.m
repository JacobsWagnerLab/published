function microFMovie(input, img, dx, dt, fileName, varargin)
%--------------------------------------------------------------------------
%function microFMovie(input, img, dx, dt, fileName, varargin)
%@author:  Manuel Campos
%@date:    June, 2014
%@copyright 2013-2014 Yale University
%==========================================================================
%**********output********:
% A video in the AVI format is saved  at the location specified in fileName
%
%**********intput********:
%input:     Structure array generated by autoSelectv4.m 
%img:       3D array of class unit16 containing the image data as 
%           nb line x nb column x nb frames
%input:     Structure array generated by 
%fileName:  String specifying the file name with the .avi extension.
%           Complement the string withe the whole path toward the folder
%           where the video must be saved.
%dx:        pixel size in microns (typically 0.064) 
%dt:        time interval between frames in sec (typically between 5 and 15) 
%
%non-mandatory input argument (a single one)
% A logical array coresponding to the cells one want to highlight (true)
% with a red outline, or not (false - green outline) in the movie. The
% logical array must have the same length as the input structure array.
%
%==========================================================================
% This function writes an AVI movie file showing the microfluidic chamber
% images overlayed with the cell contours. It is possible to highlight a
% subset of the cells with red outlines (versus green).
% The time stamp and scale bar are added on each image.
%--------------------------------------------------------------------------

% dt = 5;
% dx = 0.064;
lgind = false(length(input));
if nargin==3
    lgind = varargin{1};
    if length(lgind)~=length(input)
        disp('Input variable dimensions mismatch');
        return
    end
end

% Define a 'presence matrix' logically indicating which cells are living in
% which frames
prezMat=zeros(length(input),10000);
for ii=1:length(input)
    prezMat(ii,input(ii).frames)=1;
end
prezMat=prezMat(:,1:size(img,3));

% Initialize the video object
% obj  = VideoWriter(['\\128.36.22.176\Users 1\Manuel Campos\FM\Cell Size\',...
%     '2013-12-20 BW25113microF\MovieS1.avi'],'Uncompressed AVI');
obj  = VideoWriter(fileName, 'Uncompressed AVI');
obj.FrameRate = 30;
%obj.Quality = 100;
open(obj);
figure('Toolbar','none','Menubar','none','Name','','NumberTitle','off',...
    'IntegerHandle','off','Resize','off','color','w');
set(gca,'nextplot','replace','Visible','off');
set(gcf,'Renderer','zbuffer');
set(gca,'ytick',[]);set(gca,'xtick',[]);
set(gca,'Xcolor','w');set(gca,'Ycolor','w');
xtime = 525;
ytime = 20;
stime = 1;
ftime = 15;
xx = 1:1:80;
% Loop trhough the frames to create a figure, with the image and the cell
% outlines and 'write' this figure as a frame in the video object
% Skip 2 frames out of 3 to keep the video "small"
frIds=1:3:size(img,3);
for ii = 1:length(frIds)
    % Get the frame id to plot and the cells for which we want to draw the
    % outlines
    frames = frIds(ii);
    ixCells = logical(prezMat(:,frames));
    tmpIn = input(ixCells);
    ixT = lgind(ixCells);
%     patch([-133 966 966 -133],[1 1 824 824],'r','facecolor','k');hold on
    % Plot the image
    imshow(img(:,:,frames),[],'border','tight');hold on
    % Plot the cell outlines
    % Loop through the cells
    for cells = 1:length(tmpIn)
        % Get the frames at which 
        ix = find(tmpIn(cells).frames==frames);
        if length(tmpIn(cells).meshes{ix}) > 1
            % Change cell outline color according to the logical array
            % lgind (non-mandatory input variable)
            if ixT(cells)
                cl='r';
            else
                cl='g';
            end
            plot([tmpIn(cells).meshes{ix}(:,1) tmpIn(cells).meshes{ix}(:,3)],...
                [tmpIn(cells).meshes{ix}(:,2) tmpIn(cells).meshes{ix}(:,4)],...
                'color', cl, 'LineWidth', 2);
        end
    end
    zoom(1);
    % Time stamp
    secNb=frames*dt;
    % Format the time in the HH:MM:SS format
    HH=floor(secNb/3600);
    MM=floor((secNb-HH*3600)/60);
    SS=secNb-HH*3600-MM*60;
    HHtxt = num2str(HH, '%1.2u');
    MMtxt = num2str(MM, '%1.2u');
    SStxt = num2str(SS, '%1.2u');
    text(0.5, 0.05, [HHtxt,':',MMtxt,':',SStxt], 'Units', 'normalized',...
        'Fontsize', 20, 'color', 'w', 'backgroundcolor', [0 0 0],...
        'fontweight','b','fontname','arial','horizontalalignment','center');
    % Scale bar
    patch([7 13+2/dx 13+2/dx 7],[3 3 15 15],'r','facecolor','k',...
        'edgecolor','none');
    patch([10 10+2/dx 10+2/dx 10],[6 6 12 12],'r','facecolor','w',...
        'edgecolor','none');
    drawnow();pause(0.05);
frame = getframe(gcf);

writeVideo(obj,frame);
hold off
end
close(obj)


















